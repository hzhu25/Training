Test your knowledge
1. What are the six combinations of access modifier keywords and what do they do? 
private: Member is accessible inside the type only. This is the default.
internal: Member is accessible inside the type and any type in the same assembly.
protected: Member is accessible inside the type and any type that inherits from the type.
public: Member is accessible everywhere.
internal protected: Member is accessible inside the type, any type in the same assembly, and any type that inherits from the type. Equivalent to a fictional access modifier named internal_or_protected.
private protected: Member is accessible inside the type or any type that inherits from the type and is in the same assembly. Equivalent to a fictional access modifier named internal_and_protected. This combination is only available with C# 7.2 or later.

2.What is the difference between the static, const, and readonly keywords when applied to a type member?
Readonly: a readonly property only has a get implementation.
Static: static class cannot be inherited, cannot be instantiated, and only contain static members.
Const: not a variable, and cannot be modified

3. What does a constructor do?
The statements execute when you use the new keyword to allocate memory and instantiate a class.

4. Why is the partial keyword useful?
When working on large projects with multiple team members, it is useful to be able to split the definition of a complex class across multiple files. You do this using the partial keyword.

5. What is a tuple?
Tuples are an efficient way to combine two or more values into a single unit.

6. What does the C# record keyword do?
That makes the whole object immutable, so it acts like a value.

7. What does overloading and overriding mean?
method overriding: 
happens between base class and derived class. They have the same method signature, including access modifiers, method name, and input parameters
runtime polymorphism
method overloading: 
multiple methods in the same class, they have same method signature, including access modifiers and method name. but different input and output parameters
compile time polymorphism

8. What is the difference between a field and a property?
Fields are used to store data. There are also three specialized categories of field.
Property: The statements execute when you get or set data. Properties are the preferred way to encapsulate fields unless the memory address of the field needs to be exposed.

9. How do you make a method parameter optional?
We can make a parameter optional by assigning a default value inside the method parameter list. Optional parameters must always come last in the list of parameters.

10. What is an interface and how is it different from abstract class?
1. Abstract class provides a base class to its subclasses -- use when we have a clear class hierarchy; interface defines common behaviors or functionalities that can be implemented by any class -- contract
2. one class can only inherit from one base class, but one class can implement multiple interfaces
3. methods in abstract class can be abstracts methods or concrete methods, but methods in interface are by default abstract

11. What accessibility level are members of an interface?
by default public

12. True/False. Polymorphism allows derived classes to provide different implementations of the same method. - True
13. True/False. The override keyword is used to indicate that a method in a derived class is providing its own implementation of a method. - True
14. True/False. The new keyword is used to indicate that a method in a derived class is
providing its own implementation of a method. - False
15. True/False. Abstract methods can be used in a normal (non-abstract) class. - False
16. True/False. Normal (non-abstract) methods can be used in an abstract class. - True
17. True/False. Derived classes can override methods that were virtual in the base class. - True
18. True/False. Derived classes can override methods that were abstract in the base class. - True
19. True/False. In a derived class, you can override a method that was neither virtual non abstract in the base class. - True
20. True/False. A class that implements an interface does not have to provide an
implementation for all of the members of the interface. - False
21. True/False. A class that implements an interface is allowed to have other members that arenâ€™t defined in the interface. - True
22. True/False. A class can have more than one base class. - True
23. True/False. A class can implement more than one interface. - True